{"version":3,"sources":["../src/index.js"],"names":["Honeybadger","honeybadger","configure","apiKey","process","env","HONEYBADGER_API_KEY","app","App","token","SLACK_OAUTH_TOKEN","signingSecret","SLACK_SIGNING_SECRET","escapeMessage","text","replace","checkJoinChannel","channelId","client","conversations","info","channel","include_num_members","include_locale","res","ok","error","is_member","join","console","localizeDate","date","fallbackText","timestamp","getTime","toFixed","linkToTime","localizeMessageTimes","originalMessage","timeMatches","timezoneOffset","convertedMessage","convertedToIndex","forEach","match","slice","index","length","start","impliedValues","hasOwnProperty","end","localizeMessageShortcut","shortcut","ack","context","payload","messageTime","Date","Number","message","ts","split","chrono","parse","i","knownValues","splice","chat","postEphemeral","id","thread_ts","user","users","originalPoster","tz_offset","botToken","inChannel","postMessage","views","open","trigger_id","helpText","stack","code","error_details","notify","userId","teamId","team","log"],"mappings":"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","sourcesContent":["import * as chrono from 'chrono-node';\nimport { App } from '@slack/bolt';\nimport 'dotenv/config';\n\nimport honeybadger from 'honeybadger';\nconst Honeybadger = honeybadger.configure({\n  apiKey: process.env.HONEYBADGER_API_KEY\n});\n\nconst app = new App({\n  token: process.env.SLACK_OAUTH_TOKEN,\n  signingSecret: process.env.SLACK_SIGNING_SECRET\n});\n\nimport { messageModal } from './blocks.js';\n\n/**\n * Escape Slack message to prevent ping injection and double pings\n *\n * @param {string} text to escape\n * @returns {string} the escaped text\n */\nfunction escapeMessage(text) {\n  return (\n    text\n      // now, escape all user text according to the guide https://api.slack.com/reference/surfaces/formatting#escaping\n      .replace(/&/g, '&amp;')\n      .replace(/<\\s*![^>]*>/g, 'group')\n  );\n}\n\n/**\n * Checks and potentially joins a public channel, or returns false on private channels\n * @param {String} channelId | ID of channel to check/join\n * @param {String} token | slack token for which to check channel membership\n */\nasync function checkJoinChannel({ channelId, token }) {\n  try {\n    const res = await app.client.conversations.info({\n      token: token,\n      channel: channelId,\n      include_num_members: false,\n      include_locale: false\n    });\n\n    //check for a bad response & throw it\n    if (!res.ok) {\n      //check if the channel wasn't found\n      if (res.error === 'channel_not_found') {\n        // it couldn't find the channel, so we'll return false\n        // a false return indicates later that it'll send via webhook\n        return false;\n      }\n      // if it isn't returning false, it'll throw an error\n      throw res;\n    }\n\n    if (res.channel.is_member) {\n      return true;\n    } else {\n      await app.client.conversations.join({\n        channel: channelId,\n        token: token\n      });\n      return true;\n    }\n  } catch (err) {\n    console.error(err);\n    return false;\n  }\n}\n\n/**\n * Localize a date for display in Slack\n *\n * @param {Date} date\n * @param {string} fallbackText\n * @returns {string} The localized date for display in Slack\n */\nfunction localizeDate(date, fallbackText) {\n  // convert date to a timestamp\n  const timestamp = (date.getTime() / 1000).toFixed(0);\n\n  // link to time.is for conversion to other timezones\n  const linkToTime = `https://time.is/${timestamp}`;\n\n  // Further escape fallback text to prevent glitches with multiline or oddly formatted text\n  fallbackText = fallbackText.replace(/\\n|\\^|\\|/g, ' ');\n\n  // make a localized date string\n  return `<!date^${timestamp}^{date_short_pretty} at {time}^${linkToTime}|${fallbackText}>`;\n}\n\n/**\n * Localize a message's times\n *\n * @param {string} originalMessage\n * @param {any[]} timeMatches\n * @param {number} timezoneOffsetMinutes The timezone offset of the user, in minutes\n * @returns {string}\n */\nfunction localizeMessageTimes(originalMessage, timeMatches, timezoneOffset) {\n  let convertedMessage = '';\n  let convertedToIndex = 0;\n\n  timeMatches.forEach(match => {\n    // append the text between the last match and this match\n    convertedMessage += originalMessage.slice(convertedToIndex, match.index);\n    convertedToIndex = match.index + match.text.length;\n\n    // If timezone property isn't implied, we'll imply the timezone set on the user's slack profile\n    if (!match.start.impliedValues.hasOwnProperty('timezoneOffset')) {\n      // Note that we're only implying values, so if chrono is sure that it knows the timezone, chrono will override our hint.\n      match.start.impliedValues.timezoneOffset = timezoneOffset;\n    }\n\n    // insert in the converted message\n    convertedMessage += localizeDate(match.start.date(), match.text);\n\n    if (match.end != null) {\n      // If timezone property isn't implied, we'll imply the timezone set on the user's slack profile\n      if (!match.end.impliedValues.hasOwnProperty('timezoneOffset')) {\n        // Note that we're only implying values, so if chrono is sure that it knows the timezone, chrono will override our hint.\n        match.end.impliedValues.timezoneOffset = timezoneOffset;\n      }\n\n      // insert in the converted message\n      convertedMessage += ' to ' + localizeDate(match.end.date(), 'end time');\n    }\n  });\n\n  // make sure to append any text after the last date match\n  convertedMessage += originalMessage.slice(convertedToIndex);\n\n  return convertedMessage;\n}\n\n/**\n * Send an error to HoneyBadger\n * @param {Error} err | an error object\n */\nasync function localizeMessageShortcut({ shortcut, ack, context, payload }) {\n  await ack(); // Acknowledge shortcut request\n  let timeMatches;\n\n  try {\n    // convert Slack's message timestamp to a Date object\n    const messageTime = new Date(\n      Number(shortcut.message.ts.split('.')[0]) * 1000\n    );\n\n    // escape the original message to prevent SPI / double mentions for subteams\n    const originalMessage = escapeMessage(shortcut.message.text);\n\n    // get timezone matches from within the message\n    timeMatches = chrono.parse(originalMessage, messageTime);\n\n    // Remove time matches which only have dates & not a specific hour, or are too specific (to avoid matching things like \"now\")\n    for (let i = timeMatches.length - 1; i >= 0; --i) {\n      if (\n        !timeMatches[i].start.knownValues.hasOwnProperty('hour') ||\n        timeMatches[i].start.knownValues.hasOwnProperty('millisecond')\n      ) {\n        timeMatches.splice(i, 1);\n      }\n    }\n\n    //check for potentially no matches\n    if (timeMatches.length === 0) {\n      return app.client.chat.postEphemeral({\n        token: process.env.SLACK_OAUTH_TOKEN,\n        text: `I couldn't find a time in the message to convert. If you think this is in error, please <https://github.com/lukec11/Jonathan/issues/new|file an issue>.`,\n        channel: shortcut.channel.id,\n        thread_ts: shortcut.message.ts,\n        user: shortcut.user.id\n      });\n    }\n\n    // Most of the time, a user will not provide a timezone in their message, so we'll hold it to simplify the base case.\n    const originalPoster = await app.client.users.info({\n      token: process.env.SLACK_OAUTH_TOKEN,\n      user: shortcut.message.user\n    });\n\n    // we divide by 60 to get the user's timezone offset in minutes, as expected by chrono\n    const timezoneOffset = originalPoster.user.tz_offset / 60;\n\n    const convertedMessage = localizeMessageTimes(\n      originalMessage,\n      timeMatches,\n      timezoneOffset\n    );\n\n    //check if user is in the channel\n    const inChannel = await checkJoinChannel({\n      channelId: shortcut.channel.id,\n      token: context.botToken\n    });\n\n    //check if shortcut runner is original messager\n    if (shortcut.message.user === shortcut.user.id) {\n      //check if the app is in the channel\n      if (inChannel) {\n        // It's in the channel, so show in thread with full visibility\n        await app.client.chat.postMessage({\n          token: process.env.SLACK_OAUTH_TOKEN,\n          channel: shortcut.channel.id,\n          thread_ts: shortcut.message.ts,\n          text:\n            `:sparkles: Here's <@${shortcut.message.user}>'s post in your timezone:\\n` +\n            convertedMessage.replace(/^|\\n/g, '\\n>')\n        });\n      } else {\n        //not in the channel, so we send as a modal\n        await app.client.views.open(\n          messageModal({\n            token: context.botToken,\n            trigger_id: payload.trigger_id,\n            text: convertedMessage,\n            helpText: `Hint: Want others to be able to see this? Invite <@U019XGT657V> to the channel.`\n          })\n        );\n      }\n    } else {\n      // It's not the original user, so we show a modal\n      await app.client.views.open(\n        messageModal({\n          // The token you used to initialize your app is stored in the `context` object\n          token: context.botToken,\n          trigger_id: payload.trigger_id,\n          text: convertedMessage,\n          helpText: `\\n\\nBy the way, you should ask <@${shortcut.message.user}> to trigger this on their own message: I'll reply in-thread and magically convert the times for everyone.`\n        })\n      );\n    }\n    //send response message\n  } catch (err) {\n    console.error(err);\n\n    // Send error to HoneyBadger w/ context\n    const { stack, code, message, ...error_details } = err;\n\n    Honeybadger.notify(\n      { stack, code, message },\n      {\n        context: {\n          timeMatches,\n          message: {\n            ts: shortcut.message.ts,\n            text: shortcut.message.text\n          },\n          channelId: shortcut.channel.id,\n          userId: shortcut.user.id,\n          teamId: shortcut.team.id,\n          error_details\n        }\n      }\n    );\n  }\n}\n\n(async () => {\n  app.shortcut('check_timestamps', localizeMessageShortcut);\n  app.shortcut('convert_times', localizeMessageShortcut);\n\n  await app.start(3000);\n  console.log('online');\n})();\n"],"file":"index.js"}